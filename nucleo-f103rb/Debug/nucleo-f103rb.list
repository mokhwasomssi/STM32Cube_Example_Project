
nucleo-f103rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002044  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002150  08002150  00012150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021e4  080021e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080021e4  080021e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021e4  080021e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021e4  080021e4  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021e8  080021e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080021ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  0800225c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800225c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000746c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d0  00000000  00000000  00027505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00028dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  00029490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d0a  00000000  00000000  00029a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007901  00000000  00000000  0004177a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008321e  00000000  00000000  0004907b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc299  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f68  00000000  00000000  000cc2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002138 	.word	0x08002138

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002138 	.word	0x08002138

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000160:	4b11      	ldr	r3, [pc, #68]	; (80001a8 <MX_GPIO_Init+0x5c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a10      	ldr	r2, [pc, #64]	; (80001a8 <MX_GPIO_Init+0x5c>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b0e      	ldr	r3, [pc, #56]	; (80001a8 <MX_GPIO_Init+0x5c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2120      	movs	r1, #32
 800017c:	480b      	ldr	r0, [pc, #44]	; (80001ac <MX_GPIO_Init+0x60>)
 800017e:	f000 fcfd 	bl	8000b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000182:	2320      	movs	r3, #32
 8000184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000186:	2301      	movs	r3, #1
 8000188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800018a:	2300      	movs	r3, #0
 800018c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800018e:	2302      	movs	r3, #2
 8000190:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000192:	f107 0308 	add.w	r3, r7, #8
 8000196:	4619      	mov	r1, r3
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <MX_GPIO_Init+0x60>)
 800019a:	f000 fb6b 	bl	8000874 <HAL_GPIO_Init>

}
 800019e:	bf00      	nop
 80001a0:	3718      	adds	r7, #24
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40021000 	.word	0x40021000
 80001ac:	40010800 	.word	0x40010800

080001b0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int32_t file, uint8_t *ptr, int32_t len){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, ptr, len, 10);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	b29a      	uxth	r2, r3
 80001c0:	230a      	movs	r3, #10
 80001c2:	68b9      	ldr	r1, [r7, #8]
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <_write+0x24>)
 80001c6:	f001 f958 	bl	800147a <HAL_UART_Transmit>
    return len;
 80001ca:	687b      	ldr	r3, [r7, #4]
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3710      	adds	r7, #16
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000098 	.word	0x20000098

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 f9e0 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f81c 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f7ff ffb2 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e8:	f000 f940 	bl	800046c <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	2120      	movs	r1, #32
 80001f0:	4808      	ldr	r0, [pc, #32]	; (8000214 <main+0x3c>)
 80001f2:	f000 fcc3 	bl	8000b7c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80001f6:	2064      	movs	r0, #100	; 0x64
 80001f8:	f000 fa34 	bl	8000664 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2120      	movs	r1, #32
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <main+0x3c>)
 8000202:	f000 fcbb 	bl	8000b7c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000206:	2064      	movs	r0, #100	; 0x64
 8000208:	f000 fa2c 	bl	8000664 <HAL_Delay>

	  printf("hello\n");
 800020c:	4802      	ldr	r0, [pc, #8]	; (8000218 <main+0x40>)
 800020e:	f001 fb3f 	bl	8001890 <puts>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000212:	e7eb      	b.n	80001ec <main+0x14>
 8000214:	40010800 	.word	0x40010800
 8000218:	08002150 	.word	0x08002150

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b090      	sub	sp, #64	; 0x40
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f001 faba 	bl	80017a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023e:	2302      	movs	r3, #2
 8000240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000246:	2310      	movs	r3, #16
 8000248:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800024e:	2300      	movs	r3, #0
 8000250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000252:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000256:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0318 	add.w	r3, r7, #24
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fca5 	bl	8000bac <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000268:	f000 f819 	bl	800029e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000270:	2302      	movs	r3, #2
 8000272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f000 ff10 	bl	80010ac <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000292:	f000 f804 	bl	800029e <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3740      	adds	r7, #64	; 0x40
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002a2:	b672      	cpsid	i
}
 80002a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <Error_Handler+0x8>

080002a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <HAL_MspInit+0x5c>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4a14      	ldr	r2, [pc, #80]	; (8000304 <HAL_MspInit+0x5c>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6193      	str	r3, [r2, #24]
 80002ba:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_MspInit+0x5c>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	60bb      	str	r3, [r7, #8]
 80002c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <HAL_MspInit+0x5c>)
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <HAL_MspInit+0x5c>)
 80002cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002d0:	61d3      	str	r3, [r2, #28]
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <HAL_MspInit+0x5c>)
 80002d4:	69db      	ldr	r3, [r3, #28]
 80002d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <HAL_MspInit+0x60>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <HAL_MspInit+0x60>)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40021000 	.word	0x40021000
 8000308:	40010000 	.word	0x40010000

0800030c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000310:	e7fe      	b.n	8000310 <NMI_Handler+0x4>

08000312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000316:	e7fe      	b.n	8000316 <HardFault_Handler+0x4>

08000318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800031c:	e7fe      	b.n	800031c <MemManage_Handler+0x4>

0800031e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000322:	e7fe      	b.n	8000322 <BusFault_Handler+0x4>

08000324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000328:	e7fe      	b.n	8000328 <UsageFault_Handler+0x4>

0800032a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr

08000336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr

08000342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr

0800034e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000352:	f000 f96b 	bl	800062c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}

0800035a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	b086      	sub	sp, #24
 800035e:	af00      	add	r7, sp, #0
 8000360:	60f8      	str	r0, [r7, #12]
 8000362:	60b9      	str	r1, [r7, #8]
 8000364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
 800036a:	e00a      	b.n	8000382 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800036c:	f3af 8000 	nop.w
 8000370:	4601      	mov	r1, r0
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	60ba      	str	r2, [r7, #8]
 8000378:	b2ca      	uxtb	r2, r1
 800037a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	3301      	adds	r3, #1
 8000380:	617b      	str	r3, [r7, #20]
 8000382:	697a      	ldr	r2, [r7, #20]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	429a      	cmp	r2, r3
 8000388:	dbf0      	blt.n	800036c <_read+0x12>
	}

return len;
 800038a:	687b      	ldr	r3, [r7, #4]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	return -1;
 800039c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003aa:	b480      	push	{r7}
 80003ac:	b083      	sub	sp, #12
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003ba:	605a      	str	r2, [r3, #4]
	return 0;
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <_isatty>:

int _isatty(int file)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	return 1;
 80003d0:	2301      	movs	r3, #1
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
	return 0;
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003fc:	4a14      	ldr	r2, [pc, #80]	; (8000450 <_sbrk+0x5c>)
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <_sbrk+0x60>)
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <_sbrk+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d102      	bne.n	8000416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <_sbrk+0x64>)
 8000412:	4a12      	ldr	r2, [pc, #72]	; (800045c <_sbrk+0x68>)
 8000414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <_sbrk+0x64>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	693a      	ldr	r2, [r7, #16]
 8000420:	429a      	cmp	r2, r3
 8000422:	d207      	bcs.n	8000434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000424:	f001 f994 	bl	8001750 <__errno>
 8000428:	4603      	mov	r3, r0
 800042a:	220c      	movs	r2, #12
 800042c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
 8000432:	e009      	b.n	8000448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <_sbrk+0x64>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <_sbrk+0x64>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <_sbrk+0x64>)
 8000444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000446:	68fb      	ldr	r3, [r7, #12]
}
 8000448:	4618      	mov	r0, r3
 800044a:	3718      	adds	r7, #24
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20005000 	.word	0x20005000
 8000454:	00000400 	.word	0x00000400
 8000458:	2000008c 	.word	0x2000008c
 800045c:	200000f0 	.word	0x200000f0

08000460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <MX_USART2_UART_Init+0x50>)
 8000474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000478:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800047c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000492:	220c      	movs	r2, #12
 8000494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 80004a4:	f000 ff9c 	bl	80013e0 <HAL_UART_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ae:	f7ff fef6 	bl	800029e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000098 	.word	0x20000098
 80004bc:	40004400 	.word	0x40004400

080004c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <HAL_UART_MspInit+0x88>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d12f      	bne.n	8000540 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004e0:	4b1a      	ldr	r3, [pc, #104]	; (800054c <HAL_UART_MspInit+0x8c>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	4a19      	ldr	r2, [pc, #100]	; (800054c <HAL_UART_MspInit+0x8c>)
 80004e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ea:	61d3      	str	r3, [r2, #28]
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <HAL_UART_MspInit+0x8c>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <HAL_UART_MspInit+0x8c>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a13      	ldr	r2, [pc, #76]	; (800054c <HAL_UART_MspInit+0x8c>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <HAL_UART_MspInit+0x8c>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000510:	2304      	movs	r3, #4
 8000512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000514:	2302      	movs	r3, #2
 8000516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000518:	2303      	movs	r3, #3
 800051a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <HAL_UART_MspInit+0x90>)
 8000524:	f000 f9a6 	bl	8000874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000528:	2308      	movs	r3, #8
 800052a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <HAL_UART_MspInit+0x90>)
 800053c:	f000 f99a 	bl	8000874 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40004400 	.word	0x40004400
 800054c:	40021000 	.word	0x40021000
 8000550:	40010800 	.word	0x40010800

08000554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000554:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000556:	e003      	b.n	8000560 <LoopCopyDataInit>

08000558 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800055a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800055c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800055e:	3104      	adds	r1, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000564:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000566:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000568:	d3f6      	bcc.n	8000558 <CopyDataInit>
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800056c:	e002      	b.n	8000574 <LoopFillZerobss>

0800056e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000570:	f842 3b04 	str.w	r3, [r2], #4

08000574 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000576:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000578:	d3f9      	bcc.n	800056e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057a:	f7ff ff71 	bl	8000460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057e:	f001 f8ed 	bl	800175c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff fe29 	bl	80001d8 <main>
  bx lr
 8000586:	4770      	bx	lr
  ldr r3, =_sidata
 8000588:	080021ec 	.word	0x080021ec
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000590:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000594:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000598:	200000ec 	.word	0x200000ec

0800059c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_2_IRQHandler>
	...

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_Init+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_Init+0x28>)
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 f92b 	bl	800080c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f808 	bl	80005cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005bc:	f7ff fe74 	bl	80002a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40022000 	.word	0x40022000

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x54>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x58>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f935 	bl	800085a <HAL_SYSTICK_Config>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00e      	b.n	8000618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d80a      	bhi.n	8000616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	2200      	movs	r2, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f90b 	bl	8000822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <HAL_InitTick+0x5c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000000 	.word	0x20000000
 8000624:	20000008 	.word	0x20000008
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_IncTick+0x1c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_IncTick+0x20>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4413      	add	r3, r2
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x20>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	20000008 	.word	0x20000008
 800064c:	200000d8 	.word	0x200000d8

08000650 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <HAL_GetTick+0x10>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	200000d8 	.word	0x200000d8

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff fff0 	bl	8000650 <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_Delay+0x44>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffe0 	bl	8000650 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000008 	.word	0x20000008

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	db0a      	blt.n	800073a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	490c      	ldr	r1, [pc, #48]	; (800075c <__NVIC_SetPriority+0x4c>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	0112      	lsls	r2, r2, #4
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	440b      	add	r3, r1
 8000734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000738:	e00a      	b.n	8000750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4908      	ldr	r1, [pc, #32]	; (8000760 <__NVIC_SetPriority+0x50>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	3b04      	subs	r3, #4
 8000748:	0112      	lsls	r2, r2, #4
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	440b      	add	r3, r1
 800074e:	761a      	strb	r2, [r3, #24]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e100 	.word	0xe000e100
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b480      	push	{r7}
 8000766:	b089      	sub	sp, #36	; 0x24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	f1c3 0307 	rsb	r3, r3, #7
 800077e:	2b04      	cmp	r3, #4
 8000780:	bf28      	it	cs
 8000782:	2304      	movcs	r3, #4
 8000784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3304      	adds	r3, #4
 800078a:	2b06      	cmp	r3, #6
 800078c:	d902      	bls.n	8000794 <NVIC_EncodePriority+0x30>
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3b03      	subs	r3, #3
 8000792:	e000      	b.n	8000796 <NVIC_EncodePriority+0x32>
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	f04f 32ff 	mov.w	r2, #4294967295
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43da      	mvns	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	401a      	ands	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ac:	f04f 31ff 	mov.w	r1, #4294967295
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	fa01 f303 	lsl.w	r3, r1, r3
 80007b6:	43d9      	mvns	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	4313      	orrs	r3, r2
         );
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3724      	adds	r7, #36	; 0x24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d8:	d301      	bcc.n	80007de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007da:	2301      	movs	r3, #1
 80007dc:	e00f      	b.n	80007fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <SysTick_Config+0x40>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e6:	210f      	movs	r1, #15
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f7ff ff90 	bl	8000710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <SysTick_Config+0x40>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <SysTick_Config+0x40>)
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	e000e010 	.word	0xe000e010

0800080c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff49 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000834:	f7ff ff5e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	6978      	ldr	r0, [r7, #20]
 8000840:	f7ff ff90 	bl	8000764 <NVIC_EncodePriority>
 8000844:	4602      	mov	r2, r0
 8000846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff5f 	bl	8000710 <__NVIC_SetPriority>
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ffb0 	bl	80007c8 <SysTick_Config>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	b480      	push	{r7}
 8000876:	b08b      	sub	sp, #44	; 0x2c
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000886:	e169      	b.n	8000b5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000888:	2201      	movs	r2, #1
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	f040 8158 	bne.w	8000b56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4a9a      	ldr	r2, [pc, #616]	; (8000b14 <HAL_GPIO_Init+0x2a0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d05e      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008b0:	4a98      	ldr	r2, [pc, #608]	; (8000b14 <HAL_GPIO_Init+0x2a0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d875      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008b6:	4a98      	ldr	r2, [pc, #608]	; (8000b18 <HAL_GPIO_Init+0x2a4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d058      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008bc:	4a96      	ldr	r2, [pc, #600]	; (8000b18 <HAL_GPIO_Init+0x2a4>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d86f      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008c2:	4a96      	ldr	r2, [pc, #600]	; (8000b1c <HAL_GPIO_Init+0x2a8>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d052      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008c8:	4a94      	ldr	r2, [pc, #592]	; (8000b1c <HAL_GPIO_Init+0x2a8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d869      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008ce:	4a94      	ldr	r2, [pc, #592]	; (8000b20 <HAL_GPIO_Init+0x2ac>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d04c      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008d4:	4a92      	ldr	r2, [pc, #584]	; (8000b20 <HAL_GPIO_Init+0x2ac>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d863      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008da:	4a92      	ldr	r2, [pc, #584]	; (8000b24 <HAL_GPIO_Init+0x2b0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d046      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008e0:	4a90      	ldr	r2, [pc, #576]	; (8000b24 <HAL_GPIO_Init+0x2b0>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d85d      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d82a      	bhi.n	8000940 <HAL_GPIO_Init+0xcc>
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d859      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <HAL_GPIO_Init+0x80>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	0800096f 	.word	0x0800096f
 80008f8:	08000949 	.word	0x08000949
 80008fc:	0800095b 	.word	0x0800095b
 8000900:	0800099d 	.word	0x0800099d
 8000904:	080009a3 	.word	0x080009a3
 8000908:	080009a3 	.word	0x080009a3
 800090c:	080009a3 	.word	0x080009a3
 8000910:	080009a3 	.word	0x080009a3
 8000914:	080009a3 	.word	0x080009a3
 8000918:	080009a3 	.word	0x080009a3
 800091c:	080009a3 	.word	0x080009a3
 8000920:	080009a3 	.word	0x080009a3
 8000924:	080009a3 	.word	0x080009a3
 8000928:	080009a3 	.word	0x080009a3
 800092c:	080009a3 	.word	0x080009a3
 8000930:	080009a3 	.word	0x080009a3
 8000934:	080009a3 	.word	0x080009a3
 8000938:	08000951 	.word	0x08000951
 800093c:	08000965 	.word	0x08000965
 8000940:	4a79      	ldr	r2, [pc, #484]	; (8000b28 <HAL_GPIO_Init+0x2b4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d013      	beq.n	800096e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000946:	e02c      	b.n	80009a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e029      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	3304      	adds	r3, #4
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e024      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	3308      	adds	r3, #8
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e01f      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	330c      	adds	r3, #12
 800096a:	623b      	str	r3, [r7, #32]
          break;
 800096c:	e01a      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000976:	2304      	movs	r3, #4
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e013      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d105      	bne.n	8000990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000984:	2308      	movs	r3, #8
 8000986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	611a      	str	r2, [r3, #16]
          break;
 800098e:	e009      	b.n	80009a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000990:	2308      	movs	r3, #8
 8000992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	615a      	str	r2, [r3, #20]
          break;
 800099a:	e003      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	e000      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          break;
 80009a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	2bff      	cmp	r3, #255	; 0xff
 80009a8:	d801      	bhi.n	80009ae <HAL_GPIO_Init+0x13a>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	e001      	b.n	80009b2 <HAL_GPIO_Init+0x13e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3304      	adds	r3, #4
 80009b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d802      	bhi.n	80009c0 <HAL_GPIO_Init+0x14c>
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	e002      	b.n	80009c6 <HAL_GPIO_Init+0x152>
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	3b08      	subs	r3, #8
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	210f      	movs	r1, #15
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	401a      	ands	r2, r3
 80009d8:	6a39      	ldr	r1, [r7, #32]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	431a      	orrs	r2, r3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 80b1 	beq.w	8000b56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009f4:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a4c      	ldr	r2, [pc, #304]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a0c:	4a48      	ldr	r2, [pc, #288]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	089b      	lsrs	r3, r3, #2
 8000a12:	3302      	adds	r3, #2
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	220f      	movs	r2, #15
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a40      	ldr	r2, [pc, #256]	; (8000b34 <HAL_GPIO_Init+0x2c0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d013      	beq.n	8000a60 <HAL_GPIO_Init+0x1ec>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a3f      	ldr	r2, [pc, #252]	; (8000b38 <HAL_GPIO_Init+0x2c4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d00d      	beq.n	8000a5c <HAL_GPIO_Init+0x1e8>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a3e      	ldr	r2, [pc, #248]	; (8000b3c <HAL_GPIO_Init+0x2c8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d007      	beq.n	8000a58 <HAL_GPIO_Init+0x1e4>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a3d      	ldr	r2, [pc, #244]	; (8000b40 <HAL_GPIO_Init+0x2cc>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d101      	bne.n	8000a54 <HAL_GPIO_Init+0x1e0>
 8000a50:	2303      	movs	r3, #3
 8000a52:	e006      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a54:	2304      	movs	r3, #4
 8000a56:	e004      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e002      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a60:	2300      	movs	r3, #0
 8000a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a64:	f002 0203 	and.w	r2, r2, #3
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	4093      	lsls	r3, r2
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a72:	492f      	ldr	r1, [pc, #188]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3302      	adds	r3, #2
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	492c      	ldr	r1, [pc, #176]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	600b      	str	r3, [r1, #0]
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	4928      	ldr	r1, [pc, #160]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d006      	beq.n	8000ac2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	4922      	ldr	r1, [pc, #136]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	604b      	str	r3, [r1, #4]
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	491e      	ldr	r1, [pc, #120]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d006      	beq.n	8000aea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	4918      	ldr	r1, [pc, #96]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	608b      	str	r3, [r1, #8]
 8000ae8:	e006      	b.n	8000af8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	4914      	ldr	r1, [pc, #80]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000af4:	4013      	ands	r3, r2
 8000af6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d021      	beq.n	8000b48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	490e      	ldr	r1, [pc, #56]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	60cb      	str	r3, [r1, #12]
 8000b10:	e021      	b.n	8000b56 <HAL_GPIO_Init+0x2e2>
 8000b12:	bf00      	nop
 8000b14:	10320000 	.word	0x10320000
 8000b18:	10310000 	.word	0x10310000
 8000b1c:	10220000 	.word	0x10220000
 8000b20:	10210000 	.word	0x10210000
 8000b24:	10120000 	.word	0x10120000
 8000b28:	10110000 	.word	0x10110000
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000
 8000b34:	40010800 	.word	0x40010800
 8000b38:	40010c00 	.word	0x40010c00
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40011400 	.word	0x40011400
 8000b44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_GPIO_Init+0x304>)
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4909      	ldr	r1, [pc, #36]	; (8000b78 <HAL_GPIO_Init+0x304>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	3301      	adds	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	fa22 f303 	lsr.w	r3, r2, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f47f ae8e 	bne.w	8000888 <HAL_GPIO_Init+0x14>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	372c      	adds	r7, #44	; 0x2c
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40010400 	.word	0x40010400

08000b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b8c:	787b      	ldrb	r3, [r7, #1]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b98:	e003      	b.n	8000ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	041a      	lsls	r2, r3, #16
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	611a      	str	r2, [r3, #16]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e26c      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8087 	beq.w	8000cda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bcc:	4b92      	ldr	r3, [pc, #584]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 030c 	and.w	r3, r3, #12
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d00c      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd8:	4b8f      	ldr	r3, [pc, #572]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b08      	cmp	r3, #8
 8000be2:	d112      	bne.n	8000c0a <HAL_RCC_OscConfig+0x5e>
 8000be4:	4b8c      	ldr	r3, [pc, #560]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d10b      	bne.n	8000c0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf2:	4b89      	ldr	r3, [pc, #548]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d06c      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x12c>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d168      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e246      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c12:	d106      	bne.n	8000c22 <HAL_RCC_OscConfig+0x76>
 8000c14:	4b80      	ldr	r3, [pc, #512]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a7f      	ldr	r2, [pc, #508]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	e02e      	b.n	8000c80 <HAL_RCC_OscConfig+0xd4>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10c      	bne.n	8000c44 <HAL_RCC_OscConfig+0x98>
 8000c2a:	4b7b      	ldr	r3, [pc, #492]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a7a      	ldr	r2, [pc, #488]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b78      	ldr	r3, [pc, #480]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a77      	ldr	r2, [pc, #476]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e01d      	b.n	8000c80 <HAL_RCC_OscConfig+0xd4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0xbc>
 8000c4e:	4b72      	ldr	r3, [pc, #456]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a71      	ldr	r2, [pc, #452]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a6e      	ldr	r2, [pc, #440]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e00b      	b.n	8000c80 <HAL_RCC_OscConfig+0xd4>
 8000c68:	4b6b      	ldr	r3, [pc, #428]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a6a      	ldr	r2, [pc, #424]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b68      	ldr	r3, [pc, #416]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a67      	ldr	r2, [pc, #412]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d013      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fce2 	bl	8000650 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fcde 	bl	8000650 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e1fa      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	4b5d      	ldr	r3, [pc, #372]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0xe4>
 8000cae:	e014      	b.n	8000cda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fcce 	bl	8000650 <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fcca 	bl	8000650 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e1e6      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x10c>
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d063      	beq.n	8000dae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cf2:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d11c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x18c>
 8000cfe:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d116      	bne.n	8000d38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0a:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d005      	beq.n	8000d22 <HAL_RCC_OscConfig+0x176>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e1ba      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	4939      	ldr	r1, [pc, #228]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	e03a      	b.n	8000dae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d020      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d40:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d46:	f7ff fc83 	bl	8000650 <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fc7f 	bl	8000650 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e19b      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f0      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4927      	ldr	r1, [pc, #156]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
 8000d80:	e015      	b.n	8000dae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fc62 	bl	8000650 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc5e 	bl	8000650 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e17a      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d03a      	beq.n	8000e30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d019      	beq.n	8000df6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_RCC_OscConfig+0x274>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fc42 	bl	8000650 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc3e 	bl	8000650 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e15a      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 fad8 	bl	80013a4 <RCC_Delay>
 8000df4:	e01c      	b.n	8000e30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_RCC_OscConfig+0x274>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fc28 	bl	8000650 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e02:	e00f      	b.n	8000e24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e04:	f7ff fc24 	bl	8000650 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d908      	bls.n	8000e24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e140      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	42420000 	.word	0x42420000
 8000e20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e24:	4b9e      	ldr	r3, [pc, #632]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e9      	bne.n	8000e04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80a6 	beq.w	8000f8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e42:	4b97      	ldr	r3, [pc, #604]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10d      	bne.n	8000e6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b94      	ldr	r3, [pc, #592]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a93      	ldr	r2, [pc, #588]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b91      	ldr	r3, [pc, #580]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e66:	2301      	movs	r3, #1
 8000e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6a:	4b8e      	ldr	r3, [pc, #568]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d118      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e76:	4b8b      	ldr	r3, [pc, #556]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a8a      	ldr	r2, [pc, #552]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e82:	f7ff fbe5 	bl	8000650 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e8a:	f7ff fbe1 	bl	8000650 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b64      	cmp	r3, #100	; 0x64
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e0fd      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9c:	4b81      	ldr	r3, [pc, #516]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d106      	bne.n	8000ebe <HAL_RCC_OscConfig+0x312>
 8000eb0:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4a7a      	ldr	r2, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6213      	str	r3, [r2, #32]
 8000ebc:	e02d      	b.n	8000f1a <HAL_RCC_OscConfig+0x36e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x334>
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	4a75      	ldr	r2, [pc, #468]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	6213      	str	r3, [r2, #32]
 8000ed2:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	4a72      	ldr	r2, [pc, #456]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	f023 0304 	bic.w	r3, r3, #4
 8000edc:	6213      	str	r3, [r2, #32]
 8000ede:	e01c      	b.n	8000f1a <HAL_RCC_OscConfig+0x36e>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	d10c      	bne.n	8000f02 <HAL_RCC_OscConfig+0x356>
 8000ee8:	4b6d      	ldr	r3, [pc, #436]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4a6c      	ldr	r2, [pc, #432]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6213      	str	r3, [r2, #32]
 8000ef4:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4a69      	ldr	r2, [pc, #420]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6213      	str	r3, [r2, #32]
 8000f00:	e00b      	b.n	8000f1a <HAL_RCC_OscConfig+0x36e>
 8000f02:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4a66      	ldr	r2, [pc, #408]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	6213      	str	r3, [r2, #32]
 8000f0e:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a63      	ldr	r2, [pc, #396]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	f023 0304 	bic.w	r3, r3, #4
 8000f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d015      	beq.n	8000f4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fb95 	bl	8000650 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f28:	e00a      	b.n	8000f40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fb91 	bl	8000650 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e0ab      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f40:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0ee      	beq.n	8000f2a <HAL_RCC_OscConfig+0x37e>
 8000f4c:	e014      	b.n	8000f78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fb7f 	bl	8000650 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f54:	e00a      	b.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f56:	f7ff fb7b 	bl	8000650 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e095      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6c:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ee      	bne.n	8000f56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d105      	bne.n	8000f8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f7e:	4b48      	ldr	r3, [pc, #288]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a47      	ldr	r2, [pc, #284]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8081 	beq.w	8001096 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f94:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 030c 	and.w	r3, r3, #12
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d061      	beq.n	8001064 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d146      	bne.n	8001036 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <HAL_RCC_OscConfig+0x4fc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fb4f 	bl	8000650 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fb4b 	bl	8000650 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e067      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f0      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fdc:	d108      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	492d      	ldr	r1, [pc, #180]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a19      	ldr	r1, [r3, #32]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	430b      	orrs	r3, r1
 8001002:	4927      	ldr	r1, [pc, #156]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_RCC_OscConfig+0x4fc>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fb1f 	bl	8000650 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fb1b 	bl	8000650 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e037      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x46a>
 8001034:	e02f      	b.n	8001096 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_RCC_OscConfig+0x4fc>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fb08 	bl	8000650 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001044:	f7ff fb04 	bl	8000650 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e020      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x498>
 8001062:	e018      	b.n	8001096 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e013      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	429a      	cmp	r2, r3
 8001082:	d106      	bne.n	8001092 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108e:	429a      	cmp	r2, r3
 8001090:	d001      	beq.n	8001096 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40007000 	.word	0x40007000
 80010a8:	42420060 	.word	0x42420060

080010ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0d0      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c0:	4b6a      	ldr	r3, [pc, #424]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d910      	bls.n	80010f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ce:	4b67      	ldr	r3, [pc, #412]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 0207 	bic.w	r2, r3, #7
 80010d6:	4965      	ldr	r1, [pc, #404]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d001      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0b8      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001108:	4b59      	ldr	r3, [pc, #356]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001120:	4b53      	ldr	r3, [pc, #332]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a52      	ldr	r2, [pc, #328]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800112a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112c:	4b50      	ldr	r3, [pc, #320]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	494d      	ldr	r1, [pc, #308]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d040      	beq.n	80011cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d107      	bne.n	8001162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b47      	ldr	r3, [pc, #284]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d115      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e07f      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e073      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e06b      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f023 0203 	bic.w	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4936      	ldr	r1, [pc, #216]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800119c:	f7ff fa58 	bl	8000650 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a2:	e00a      	b.n	80011ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a4:	f7ff fa54 	bl	8000650 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e053      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 020c 	and.w	r2, r3, #12
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d1eb      	bne.n	80011a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d210      	bcs.n	80011fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0207 	bic.w	r2, r3, #7
 80011e2:	4922      	ldr	r1, [pc, #136]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e032      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4916      	ldr	r1, [pc, #88]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	490e      	ldr	r1, [pc, #56]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800123a:	f000 f821 	bl	8001280 <HAL_RCC_GetSysClockFreq>
 800123e:	4602      	mov	r2, r0
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	490a      	ldr	r1, [pc, #40]	; (8001274 <HAL_RCC_ClockConfig+0x1c8>)
 800124c:	5ccb      	ldrb	r3, [r1, r3]
 800124e:	fa22 f303 	lsr.w	r3, r2, r3
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_RCC_ClockConfig+0x1cc>)
 8001254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_RCC_ClockConfig+0x1d0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f9b6 	bl	80005cc <HAL_InitTick>

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	.word	0x40022000
 8001270:	40021000 	.word	0x40021000
 8001274:	08002168 	.word	0x08002168
 8001278:	20000000 	.word	0x20000000
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001280:	b490      	push	{r4, r7}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001288:	1d3c      	adds	r4, r7, #4
 800128a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001290:	f240 2301 	movw	r3, #513	; 0x201
 8001294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012aa:	4b22      	ldr	r3, [pc, #136]	; (8001334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d002      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x40>
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d003      	beq.n	80012c6 <HAL_RCC_GetSysClockFreq+0x46>
 80012be:	e02d      	b.n	800131c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012c2:	623b      	str	r3, [r7, #32]
      break;
 80012c4:	e02d      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	0c9b      	lsrs	r3, r3, #18
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012d2:	4413      	add	r3, r2
 80012d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	0c5b      	lsrs	r3, r3, #17
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012f2:	4413      	add	r3, r2
 80012f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012fe:	fb02 f203 	mul.w	r2, r2, r3
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
 800130a:	e004      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	623b      	str	r3, [r7, #32]
      break;
 800131a:	e002      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_RCC_GetSysClockFreq+0xb8>)
 800131e:	623b      	str	r3, [r7, #32]
      break;
 8001320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001322:	6a3b      	ldr	r3, [r7, #32]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bc90      	pop	{r4, r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	08002158 	.word	0x08002158
 8001334:	40021000 	.word	0x40021000
 8001338:	007a1200 	.word	0x007a1200
 800133c:	003d0900 	.word	0x003d0900

08001340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <HAL_RCC_GetHCLKFreq+0x10>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000000 	.word	0x20000000

08001354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001358:	f7ff fff2 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 800135c:	4602      	mov	r2, r0
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	4903      	ldr	r1, [pc, #12]	; (8001378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800136a:	5ccb      	ldrb	r3, [r1, r3]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	08002178 	.word	0x08002178

0800137c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001380:	f7ff ffde 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 8001384:	4602      	mov	r2, r0
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	0adb      	lsrs	r3, r3, #11
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	4903      	ldr	r1, [pc, #12]	; (80013a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001392:	5ccb      	ldrb	r3, [r1, r3]
 8001394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	08002178 	.word	0x08002178

080013a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <RCC_Delay+0x34>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <RCC_Delay+0x38>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0a5b      	lsrs	r3, r3, #9
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013c0:	bf00      	nop
  }
  while (Delay --);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1e5a      	subs	r2, r3, #1
 80013c6:	60fa      	str	r2, [r7, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f9      	bne.n	80013c0 <RCC_Delay+0x1c>
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	20000000 	.word	0x20000000
 80013dc:	10624dd3 	.word	0x10624dd3

080013e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e03f      	b.n	8001472 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff f85a 	bl	80004c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2224      	movs	r2, #36	; 0x24
 8001410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f905 	bl	8001634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2220      	movs	r2, #32
 8001464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b08a      	sub	sp, #40	; 0x28
 800147e:	af02      	add	r7, sp, #8
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4613      	mov	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b20      	cmp	r3, #32
 8001498:	d17c      	bne.n	8001594 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_UART_Transmit+0x2c>
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e075      	b.n	8001596 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_UART_Transmit+0x3e>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e06e      	b.n	8001596 <HAL_UART_Transmit+0x11c>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2221      	movs	r2, #33	; 0x21
 80014ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80014ce:	f7ff f8bf 	bl	8000650 <HAL_GetTick>
 80014d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	88fa      	ldrh	r2, [r7, #6]
 80014de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e8:	d108      	bne.n	80014fc <HAL_UART_Transmit+0x82>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d104      	bne.n	80014fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	e003      	b.n	8001504 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800150c:	e02a      	b.n	8001564 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2200      	movs	r2, #0
 8001516:	2180      	movs	r1, #128	; 0x80
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f840 	bl	800159e <UART_WaitOnFlagUntilTimeout>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e036      	b.n	8001596 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10b      	bne.n	8001546 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800153c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	3302      	adds	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	e007      	b.n	8001556 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	3301      	adds	r3, #1
 8001554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001568:	b29b      	uxth	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1cf      	bne.n	800150e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2200      	movs	r2, #0
 8001576:	2140      	movs	r1, #64	; 0x40
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 f810 	bl	800159e <UART_WaitOnFlagUntilTimeout>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e006      	b.n	8001596 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2220      	movs	r2, #32
 800158c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	e000      	b.n	8001596 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001594:	2302      	movs	r3, #2
  }
}
 8001596:	4618      	mov	r0, r3
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4613      	mov	r3, r2
 80015ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015ae:	e02c      	b.n	800160a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b6:	d028      	beq.n	800160a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <UART_WaitOnFlagUntilTimeout+0x30>
 80015be:	f7ff f847 	bl	8000650 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d21d      	bcs.n	800160a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0201 	bic.w	r2, r2, #1
 80015ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2220      	movs	r2, #32
 80015f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2220      	movs	r2, #32
 80015fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e00f      	b.n	800162a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4013      	ands	r3, r2
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	429a      	cmp	r2, r3
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	429a      	cmp	r2, r3
 8001626:	d0c3      	beq.n	80015b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4313      	orrs	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800166e:	f023 030c 	bic.w	r3, r3, #12
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	430b      	orrs	r3, r1
 800167a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699a      	ldr	r2, [r3, #24]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a2c      	ldr	r2, [pc, #176]	; (8001748 <UART_SetConfig+0x114>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d103      	bne.n	80016a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800169c:	f7ff fe6e 	bl	800137c <HAL_RCC_GetPCLK2Freq>
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	e002      	b.n	80016aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80016a4:	f7ff fe56 	bl	8001354 <HAL_RCC_GetPCLK1Freq>
 80016a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009a      	lsls	r2, r3, #2
 80016b4:	441a      	add	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	4a22      	ldr	r2, [pc, #136]	; (800174c <UART_SetConfig+0x118>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	0119      	lsls	r1, r3, #4
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	009a      	lsls	r2, r3, #2
 80016d4:	441a      	add	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <UART_SetConfig+0x118>)
 80016e2:	fba3 0302 	umull	r0, r3, r3, r2
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2064      	movs	r0, #100	; 0x64
 80016ea:	fb00 f303 	mul.w	r3, r0, r3
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	3332      	adds	r3, #50	; 0x32
 80016f4:	4a15      	ldr	r2, [pc, #84]	; (800174c <UART_SetConfig+0x118>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001700:	4419      	add	r1, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	009a      	lsls	r2, r3, #2
 800170c:	441a      	add	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	fbb2 f2f3 	udiv	r2, r2, r3
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <UART_SetConfig+0x118>)
 800171a:	fba3 0302 	umull	r0, r3, r3, r2
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2064      	movs	r0, #100	; 0x64
 8001722:	fb00 f303 	mul.w	r3, r0, r3
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	3332      	adds	r3, #50	; 0x32
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <UART_SetConfig+0x118>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	f003 020f 	and.w	r2, r3, #15
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	440a      	add	r2, r1
 800173e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40013800 	.word	0x40013800
 800174c:	51eb851f 	.word	0x51eb851f

08001750 <__errno>:
 8001750:	4b01      	ldr	r3, [pc, #4]	; (8001758 <__errno+0x8>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	2000000c 	.word	0x2000000c

0800175c <__libc_init_array>:
 800175c:	b570      	push	{r4, r5, r6, lr}
 800175e:	2600      	movs	r6, #0
 8001760:	4d0c      	ldr	r5, [pc, #48]	; (8001794 <__libc_init_array+0x38>)
 8001762:	4c0d      	ldr	r4, [pc, #52]	; (8001798 <__libc_init_array+0x3c>)
 8001764:	1b64      	subs	r4, r4, r5
 8001766:	10a4      	asrs	r4, r4, #2
 8001768:	42a6      	cmp	r6, r4
 800176a:	d109      	bne.n	8001780 <__libc_init_array+0x24>
 800176c:	f000 fce4 	bl	8002138 <_init>
 8001770:	2600      	movs	r6, #0
 8001772:	4d0a      	ldr	r5, [pc, #40]	; (800179c <__libc_init_array+0x40>)
 8001774:	4c0a      	ldr	r4, [pc, #40]	; (80017a0 <__libc_init_array+0x44>)
 8001776:	1b64      	subs	r4, r4, r5
 8001778:	10a4      	asrs	r4, r4, #2
 800177a:	42a6      	cmp	r6, r4
 800177c:	d105      	bne.n	800178a <__libc_init_array+0x2e>
 800177e:	bd70      	pop	{r4, r5, r6, pc}
 8001780:	f855 3b04 	ldr.w	r3, [r5], #4
 8001784:	4798      	blx	r3
 8001786:	3601      	adds	r6, #1
 8001788:	e7ee      	b.n	8001768 <__libc_init_array+0xc>
 800178a:	f855 3b04 	ldr.w	r3, [r5], #4
 800178e:	4798      	blx	r3
 8001790:	3601      	adds	r6, #1
 8001792:	e7f2      	b.n	800177a <__libc_init_array+0x1e>
 8001794:	080021e4 	.word	0x080021e4
 8001798:	080021e4 	.word	0x080021e4
 800179c:	080021e4 	.word	0x080021e4
 80017a0:	080021e8 	.word	0x080021e8

080017a4 <memset>:
 80017a4:	4603      	mov	r3, r0
 80017a6:	4402      	add	r2, r0
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d100      	bne.n	80017ae <memset+0xa>
 80017ac:	4770      	bx	lr
 80017ae:	f803 1b01 	strb.w	r1, [r3], #1
 80017b2:	e7f9      	b.n	80017a8 <memset+0x4>

080017b4 <_puts_r>:
 80017b4:	b570      	push	{r4, r5, r6, lr}
 80017b6:	460e      	mov	r6, r1
 80017b8:	4605      	mov	r5, r0
 80017ba:	b118      	cbz	r0, 80017c4 <_puts_r+0x10>
 80017bc:	6983      	ldr	r3, [r0, #24]
 80017be:	b90b      	cbnz	r3, 80017c4 <_puts_r+0x10>
 80017c0:	f000 fa48 	bl	8001c54 <__sinit>
 80017c4:	69ab      	ldr	r3, [r5, #24]
 80017c6:	68ac      	ldr	r4, [r5, #8]
 80017c8:	b913      	cbnz	r3, 80017d0 <_puts_r+0x1c>
 80017ca:	4628      	mov	r0, r5
 80017cc:	f000 fa42 	bl	8001c54 <__sinit>
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <_puts_r+0xd0>)
 80017d2:	429c      	cmp	r4, r3
 80017d4:	d120      	bne.n	8001818 <_puts_r+0x64>
 80017d6:	686c      	ldr	r4, [r5, #4]
 80017d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017da:	07db      	lsls	r3, r3, #31
 80017dc:	d405      	bmi.n	80017ea <_puts_r+0x36>
 80017de:	89a3      	ldrh	r3, [r4, #12]
 80017e0:	0598      	lsls	r0, r3, #22
 80017e2:	d402      	bmi.n	80017ea <_puts_r+0x36>
 80017e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017e6:	f000 fad3 	bl	8001d90 <__retarget_lock_acquire_recursive>
 80017ea:	89a3      	ldrh	r3, [r4, #12]
 80017ec:	0719      	lsls	r1, r3, #28
 80017ee:	d51d      	bpl.n	800182c <_puts_r+0x78>
 80017f0:	6923      	ldr	r3, [r4, #16]
 80017f2:	b1db      	cbz	r3, 800182c <_puts_r+0x78>
 80017f4:	3e01      	subs	r6, #1
 80017f6:	68a3      	ldr	r3, [r4, #8]
 80017f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60a3      	str	r3, [r4, #8]
 8001800:	bb39      	cbnz	r1, 8001852 <_puts_r+0x9e>
 8001802:	2b00      	cmp	r3, #0
 8001804:	da38      	bge.n	8001878 <_puts_r+0xc4>
 8001806:	4622      	mov	r2, r4
 8001808:	210a      	movs	r1, #10
 800180a:	4628      	mov	r0, r5
 800180c:	f000 f848 	bl	80018a0 <__swbuf_r>
 8001810:	3001      	adds	r0, #1
 8001812:	d011      	beq.n	8001838 <_puts_r+0x84>
 8001814:	250a      	movs	r5, #10
 8001816:	e011      	b.n	800183c <_puts_r+0x88>
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <_puts_r+0xd4>)
 800181a:	429c      	cmp	r4, r3
 800181c:	d101      	bne.n	8001822 <_puts_r+0x6e>
 800181e:	68ac      	ldr	r4, [r5, #8]
 8001820:	e7da      	b.n	80017d8 <_puts_r+0x24>
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <_puts_r+0xd8>)
 8001824:	429c      	cmp	r4, r3
 8001826:	bf08      	it	eq
 8001828:	68ec      	ldreq	r4, [r5, #12]
 800182a:	e7d5      	b.n	80017d8 <_puts_r+0x24>
 800182c:	4621      	mov	r1, r4
 800182e:	4628      	mov	r0, r5
 8001830:	f000 f888 	bl	8001944 <__swsetup_r>
 8001834:	2800      	cmp	r0, #0
 8001836:	d0dd      	beq.n	80017f4 <_puts_r+0x40>
 8001838:	f04f 35ff 	mov.w	r5, #4294967295
 800183c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800183e:	07da      	lsls	r2, r3, #31
 8001840:	d405      	bmi.n	800184e <_puts_r+0x9a>
 8001842:	89a3      	ldrh	r3, [r4, #12]
 8001844:	059b      	lsls	r3, r3, #22
 8001846:	d402      	bmi.n	800184e <_puts_r+0x9a>
 8001848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800184a:	f000 faa2 	bl	8001d92 <__retarget_lock_release_recursive>
 800184e:	4628      	mov	r0, r5
 8001850:	bd70      	pop	{r4, r5, r6, pc}
 8001852:	2b00      	cmp	r3, #0
 8001854:	da04      	bge.n	8001860 <_puts_r+0xac>
 8001856:	69a2      	ldr	r2, [r4, #24]
 8001858:	429a      	cmp	r2, r3
 800185a:	dc06      	bgt.n	800186a <_puts_r+0xb6>
 800185c:	290a      	cmp	r1, #10
 800185e:	d004      	beq.n	800186a <_puts_r+0xb6>
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	6022      	str	r2, [r4, #0]
 8001866:	7019      	strb	r1, [r3, #0]
 8001868:	e7c5      	b.n	80017f6 <_puts_r+0x42>
 800186a:	4622      	mov	r2, r4
 800186c:	4628      	mov	r0, r5
 800186e:	f000 f817 	bl	80018a0 <__swbuf_r>
 8001872:	3001      	adds	r0, #1
 8001874:	d1bf      	bne.n	80017f6 <_puts_r+0x42>
 8001876:	e7df      	b.n	8001838 <_puts_r+0x84>
 8001878:	250a      	movs	r5, #10
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	6022      	str	r2, [r4, #0]
 8001880:	701d      	strb	r5, [r3, #0]
 8001882:	e7db      	b.n	800183c <_puts_r+0x88>
 8001884:	080021a4 	.word	0x080021a4
 8001888:	080021c4 	.word	0x080021c4
 800188c:	08002184 	.word	0x08002184

08001890 <puts>:
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <puts+0xc>)
 8001892:	4601      	mov	r1, r0
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	f7ff bf8d 	b.w	80017b4 <_puts_r>
 800189a:	bf00      	nop
 800189c:	2000000c 	.word	0x2000000c

080018a0 <__swbuf_r>:
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a2:	460e      	mov	r6, r1
 80018a4:	4614      	mov	r4, r2
 80018a6:	4605      	mov	r5, r0
 80018a8:	b118      	cbz	r0, 80018b2 <__swbuf_r+0x12>
 80018aa:	6983      	ldr	r3, [r0, #24]
 80018ac:	b90b      	cbnz	r3, 80018b2 <__swbuf_r+0x12>
 80018ae:	f000 f9d1 	bl	8001c54 <__sinit>
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <__swbuf_r+0x98>)
 80018b4:	429c      	cmp	r4, r3
 80018b6:	d12b      	bne.n	8001910 <__swbuf_r+0x70>
 80018b8:	686c      	ldr	r4, [r5, #4]
 80018ba:	69a3      	ldr	r3, [r4, #24]
 80018bc:	60a3      	str	r3, [r4, #8]
 80018be:	89a3      	ldrh	r3, [r4, #12]
 80018c0:	071a      	lsls	r2, r3, #28
 80018c2:	d52f      	bpl.n	8001924 <__swbuf_r+0x84>
 80018c4:	6923      	ldr	r3, [r4, #16]
 80018c6:	b36b      	cbz	r3, 8001924 <__swbuf_r+0x84>
 80018c8:	6923      	ldr	r3, [r4, #16]
 80018ca:	6820      	ldr	r0, [r4, #0]
 80018cc:	b2f6      	uxtb	r6, r6
 80018ce:	1ac0      	subs	r0, r0, r3
 80018d0:	6963      	ldr	r3, [r4, #20]
 80018d2:	4637      	mov	r7, r6
 80018d4:	4283      	cmp	r3, r0
 80018d6:	dc04      	bgt.n	80018e2 <__swbuf_r+0x42>
 80018d8:	4621      	mov	r1, r4
 80018da:	4628      	mov	r0, r5
 80018dc:	f000 f926 	bl	8001b2c <_fflush_r>
 80018e0:	bb30      	cbnz	r0, 8001930 <__swbuf_r+0x90>
 80018e2:	68a3      	ldr	r3, [r4, #8]
 80018e4:	3001      	adds	r0, #1
 80018e6:	3b01      	subs	r3, #1
 80018e8:	60a3      	str	r3, [r4, #8]
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	6022      	str	r2, [r4, #0]
 80018f0:	701e      	strb	r6, [r3, #0]
 80018f2:	6963      	ldr	r3, [r4, #20]
 80018f4:	4283      	cmp	r3, r0
 80018f6:	d004      	beq.n	8001902 <__swbuf_r+0x62>
 80018f8:	89a3      	ldrh	r3, [r4, #12]
 80018fa:	07db      	lsls	r3, r3, #31
 80018fc:	d506      	bpl.n	800190c <__swbuf_r+0x6c>
 80018fe:	2e0a      	cmp	r6, #10
 8001900:	d104      	bne.n	800190c <__swbuf_r+0x6c>
 8001902:	4621      	mov	r1, r4
 8001904:	4628      	mov	r0, r5
 8001906:	f000 f911 	bl	8001b2c <_fflush_r>
 800190a:	b988      	cbnz	r0, 8001930 <__swbuf_r+0x90>
 800190c:	4638      	mov	r0, r7
 800190e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <__swbuf_r+0x9c>)
 8001912:	429c      	cmp	r4, r3
 8001914:	d101      	bne.n	800191a <__swbuf_r+0x7a>
 8001916:	68ac      	ldr	r4, [r5, #8]
 8001918:	e7cf      	b.n	80018ba <__swbuf_r+0x1a>
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <__swbuf_r+0xa0>)
 800191c:	429c      	cmp	r4, r3
 800191e:	bf08      	it	eq
 8001920:	68ec      	ldreq	r4, [r5, #12]
 8001922:	e7ca      	b.n	80018ba <__swbuf_r+0x1a>
 8001924:	4621      	mov	r1, r4
 8001926:	4628      	mov	r0, r5
 8001928:	f000 f80c 	bl	8001944 <__swsetup_r>
 800192c:	2800      	cmp	r0, #0
 800192e:	d0cb      	beq.n	80018c8 <__swbuf_r+0x28>
 8001930:	f04f 37ff 	mov.w	r7, #4294967295
 8001934:	e7ea      	b.n	800190c <__swbuf_r+0x6c>
 8001936:	bf00      	nop
 8001938:	080021a4 	.word	0x080021a4
 800193c:	080021c4 	.word	0x080021c4
 8001940:	08002184 	.word	0x08002184

08001944 <__swsetup_r>:
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <__swsetup_r+0xcc>)
 8001946:	b570      	push	{r4, r5, r6, lr}
 8001948:	681d      	ldr	r5, [r3, #0]
 800194a:	4606      	mov	r6, r0
 800194c:	460c      	mov	r4, r1
 800194e:	b125      	cbz	r5, 800195a <__swsetup_r+0x16>
 8001950:	69ab      	ldr	r3, [r5, #24]
 8001952:	b913      	cbnz	r3, 800195a <__swsetup_r+0x16>
 8001954:	4628      	mov	r0, r5
 8001956:	f000 f97d 	bl	8001c54 <__sinit>
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <__swsetup_r+0xd0>)
 800195c:	429c      	cmp	r4, r3
 800195e:	d10f      	bne.n	8001980 <__swsetup_r+0x3c>
 8001960:	686c      	ldr	r4, [r5, #4]
 8001962:	89a3      	ldrh	r3, [r4, #12]
 8001964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001968:	0719      	lsls	r1, r3, #28
 800196a:	d42c      	bmi.n	80019c6 <__swsetup_r+0x82>
 800196c:	06dd      	lsls	r5, r3, #27
 800196e:	d411      	bmi.n	8001994 <__swsetup_r+0x50>
 8001970:	2309      	movs	r3, #9
 8001972:	6033      	str	r3, [r6, #0]
 8001974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	81a3      	strh	r3, [r4, #12]
 800197e:	e03e      	b.n	80019fe <__swsetup_r+0xba>
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <__swsetup_r+0xd4>)
 8001982:	429c      	cmp	r4, r3
 8001984:	d101      	bne.n	800198a <__swsetup_r+0x46>
 8001986:	68ac      	ldr	r4, [r5, #8]
 8001988:	e7eb      	b.n	8001962 <__swsetup_r+0x1e>
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <__swsetup_r+0xd8>)
 800198c:	429c      	cmp	r4, r3
 800198e:	bf08      	it	eq
 8001990:	68ec      	ldreq	r4, [r5, #12]
 8001992:	e7e6      	b.n	8001962 <__swsetup_r+0x1e>
 8001994:	0758      	lsls	r0, r3, #29
 8001996:	d512      	bpl.n	80019be <__swsetup_r+0x7a>
 8001998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800199a:	b141      	cbz	r1, 80019ae <__swsetup_r+0x6a>
 800199c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019a0:	4299      	cmp	r1, r3
 80019a2:	d002      	beq.n	80019aa <__swsetup_r+0x66>
 80019a4:	4630      	mov	r0, r6
 80019a6:	f000 fa59 	bl	8001e5c <_free_r>
 80019aa:	2300      	movs	r3, #0
 80019ac:	6363      	str	r3, [r4, #52]	; 0x34
 80019ae:	89a3      	ldrh	r3, [r4, #12]
 80019b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019b4:	81a3      	strh	r3, [r4, #12]
 80019b6:	2300      	movs	r3, #0
 80019b8:	6063      	str	r3, [r4, #4]
 80019ba:	6923      	ldr	r3, [r4, #16]
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	89a3      	ldrh	r3, [r4, #12]
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	81a3      	strh	r3, [r4, #12]
 80019c6:	6923      	ldr	r3, [r4, #16]
 80019c8:	b94b      	cbnz	r3, 80019de <__swsetup_r+0x9a>
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d4:	d003      	beq.n	80019de <__swsetup_r+0x9a>
 80019d6:	4621      	mov	r1, r4
 80019d8:	4630      	mov	r0, r6
 80019da:	f000 f9ff 	bl	8001ddc <__smakebuf_r>
 80019de:	89a0      	ldrh	r0, [r4, #12]
 80019e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019e4:	f010 0301 	ands.w	r3, r0, #1
 80019e8:	d00a      	beq.n	8001a00 <__swsetup_r+0xbc>
 80019ea:	2300      	movs	r3, #0
 80019ec:	60a3      	str	r3, [r4, #8]
 80019ee:	6963      	ldr	r3, [r4, #20]
 80019f0:	425b      	negs	r3, r3
 80019f2:	61a3      	str	r3, [r4, #24]
 80019f4:	6923      	ldr	r3, [r4, #16]
 80019f6:	b943      	cbnz	r3, 8001a0a <__swsetup_r+0xc6>
 80019f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80019fc:	d1ba      	bne.n	8001974 <__swsetup_r+0x30>
 80019fe:	bd70      	pop	{r4, r5, r6, pc}
 8001a00:	0781      	lsls	r1, r0, #30
 8001a02:	bf58      	it	pl
 8001a04:	6963      	ldrpl	r3, [r4, #20]
 8001a06:	60a3      	str	r3, [r4, #8]
 8001a08:	e7f4      	b.n	80019f4 <__swsetup_r+0xb0>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	e7f7      	b.n	80019fe <__swsetup_r+0xba>
 8001a0e:	bf00      	nop
 8001a10:	2000000c 	.word	0x2000000c
 8001a14:	080021a4 	.word	0x080021a4
 8001a18:	080021c4 	.word	0x080021c4
 8001a1c:	08002184 	.word	0x08002184

08001a20 <__sflush_r>:
 8001a20:	898a      	ldrh	r2, [r1, #12]
 8001a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a26:	4605      	mov	r5, r0
 8001a28:	0710      	lsls	r0, r2, #28
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	d458      	bmi.n	8001ae0 <__sflush_r+0xc0>
 8001a2e:	684b      	ldr	r3, [r1, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	dc05      	bgt.n	8001a40 <__sflush_r+0x20>
 8001a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	dc02      	bgt.n	8001a40 <__sflush_r+0x20>
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a42:	2e00      	cmp	r6, #0
 8001a44:	d0f9      	beq.n	8001a3a <__sflush_r+0x1a>
 8001a46:	2300      	movs	r3, #0
 8001a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a4c:	682f      	ldr	r7, [r5, #0]
 8001a4e:	602b      	str	r3, [r5, #0]
 8001a50:	d032      	beq.n	8001ab8 <__sflush_r+0x98>
 8001a52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a54:	89a3      	ldrh	r3, [r4, #12]
 8001a56:	075a      	lsls	r2, r3, #29
 8001a58:	d505      	bpl.n	8001a66 <__sflush_r+0x46>
 8001a5a:	6863      	ldr	r3, [r4, #4]
 8001a5c:	1ac0      	subs	r0, r0, r3
 8001a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a60:	b10b      	cbz	r3, 8001a66 <__sflush_r+0x46>
 8001a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a64:	1ac0      	subs	r0, r0, r3
 8001a66:	2300      	movs	r3, #0
 8001a68:	4602      	mov	r2, r0
 8001a6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	6a21      	ldr	r1, [r4, #32]
 8001a70:	47b0      	blx	r6
 8001a72:	1c43      	adds	r3, r0, #1
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	d106      	bne.n	8001a86 <__sflush_r+0x66>
 8001a78:	6829      	ldr	r1, [r5, #0]
 8001a7a:	291d      	cmp	r1, #29
 8001a7c:	d82c      	bhi.n	8001ad8 <__sflush_r+0xb8>
 8001a7e:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <__sflush_r+0x108>)
 8001a80:	40ca      	lsrs	r2, r1
 8001a82:	07d6      	lsls	r6, r2, #31
 8001a84:	d528      	bpl.n	8001ad8 <__sflush_r+0xb8>
 8001a86:	2200      	movs	r2, #0
 8001a88:	6062      	str	r2, [r4, #4]
 8001a8a:	6922      	ldr	r2, [r4, #16]
 8001a8c:	04d9      	lsls	r1, r3, #19
 8001a8e:	6022      	str	r2, [r4, #0]
 8001a90:	d504      	bpl.n	8001a9c <__sflush_r+0x7c>
 8001a92:	1c42      	adds	r2, r0, #1
 8001a94:	d101      	bne.n	8001a9a <__sflush_r+0x7a>
 8001a96:	682b      	ldr	r3, [r5, #0]
 8001a98:	b903      	cbnz	r3, 8001a9c <__sflush_r+0x7c>
 8001a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8001a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a9e:	602f      	str	r7, [r5, #0]
 8001aa0:	2900      	cmp	r1, #0
 8001aa2:	d0ca      	beq.n	8001a3a <__sflush_r+0x1a>
 8001aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001aa8:	4299      	cmp	r1, r3
 8001aaa:	d002      	beq.n	8001ab2 <__sflush_r+0x92>
 8001aac:	4628      	mov	r0, r5
 8001aae:	f000 f9d5 	bl	8001e5c <_free_r>
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8001ab6:	e7c1      	b.n	8001a3c <__sflush_r+0x1c>
 8001ab8:	6a21      	ldr	r1, [r4, #32]
 8001aba:	2301      	movs	r3, #1
 8001abc:	4628      	mov	r0, r5
 8001abe:	47b0      	blx	r6
 8001ac0:	1c41      	adds	r1, r0, #1
 8001ac2:	d1c7      	bne.n	8001a54 <__sflush_r+0x34>
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0c4      	beq.n	8001a54 <__sflush_r+0x34>
 8001aca:	2b1d      	cmp	r3, #29
 8001acc:	d001      	beq.n	8001ad2 <__sflush_r+0xb2>
 8001ace:	2b16      	cmp	r3, #22
 8001ad0:	d101      	bne.n	8001ad6 <__sflush_r+0xb6>
 8001ad2:	602f      	str	r7, [r5, #0]
 8001ad4:	e7b1      	b.n	8001a3a <__sflush_r+0x1a>
 8001ad6:	89a3      	ldrh	r3, [r4, #12]
 8001ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001adc:	81a3      	strh	r3, [r4, #12]
 8001ade:	e7ad      	b.n	8001a3c <__sflush_r+0x1c>
 8001ae0:	690f      	ldr	r7, [r1, #16]
 8001ae2:	2f00      	cmp	r7, #0
 8001ae4:	d0a9      	beq.n	8001a3a <__sflush_r+0x1a>
 8001ae6:	0793      	lsls	r3, r2, #30
 8001ae8:	bf18      	it	ne
 8001aea:	2300      	movne	r3, #0
 8001aec:	680e      	ldr	r6, [r1, #0]
 8001aee:	bf08      	it	eq
 8001af0:	694b      	ldreq	r3, [r1, #20]
 8001af2:	eba6 0807 	sub.w	r8, r6, r7
 8001af6:	600f      	str	r7, [r1, #0]
 8001af8:	608b      	str	r3, [r1, #8]
 8001afa:	f1b8 0f00 	cmp.w	r8, #0
 8001afe:	dd9c      	ble.n	8001a3a <__sflush_r+0x1a>
 8001b00:	4643      	mov	r3, r8
 8001b02:	463a      	mov	r2, r7
 8001b04:	4628      	mov	r0, r5
 8001b06:	6a21      	ldr	r1, [r4, #32]
 8001b08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b0a:	47b0      	blx	r6
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	dc06      	bgt.n	8001b1e <__sflush_r+0xfe>
 8001b10:	89a3      	ldrh	r3, [r4, #12]
 8001b12:	f04f 30ff 	mov.w	r0, #4294967295
 8001b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1a:	81a3      	strh	r3, [r4, #12]
 8001b1c:	e78e      	b.n	8001a3c <__sflush_r+0x1c>
 8001b1e:	4407      	add	r7, r0
 8001b20:	eba8 0800 	sub.w	r8, r8, r0
 8001b24:	e7e9      	b.n	8001afa <__sflush_r+0xda>
 8001b26:	bf00      	nop
 8001b28:	20400001 	.word	0x20400001

08001b2c <_fflush_r>:
 8001b2c:	b538      	push	{r3, r4, r5, lr}
 8001b2e:	690b      	ldr	r3, [r1, #16]
 8001b30:	4605      	mov	r5, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	b913      	cbnz	r3, 8001b3c <_fflush_r+0x10>
 8001b36:	2500      	movs	r5, #0
 8001b38:	4628      	mov	r0, r5
 8001b3a:	bd38      	pop	{r3, r4, r5, pc}
 8001b3c:	b118      	cbz	r0, 8001b46 <_fflush_r+0x1a>
 8001b3e:	6983      	ldr	r3, [r0, #24]
 8001b40:	b90b      	cbnz	r3, 8001b46 <_fflush_r+0x1a>
 8001b42:	f000 f887 	bl	8001c54 <__sinit>
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <_fflush_r+0x6c>)
 8001b48:	429c      	cmp	r4, r3
 8001b4a:	d11b      	bne.n	8001b84 <_fflush_r+0x58>
 8001b4c:	686c      	ldr	r4, [r5, #4]
 8001b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0ef      	beq.n	8001b36 <_fflush_r+0xa>
 8001b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b58:	07d0      	lsls	r0, r2, #31
 8001b5a:	d404      	bmi.n	8001b66 <_fflush_r+0x3a>
 8001b5c:	0599      	lsls	r1, r3, #22
 8001b5e:	d402      	bmi.n	8001b66 <_fflush_r+0x3a>
 8001b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b62:	f000 f915 	bl	8001d90 <__retarget_lock_acquire_recursive>
 8001b66:	4628      	mov	r0, r5
 8001b68:	4621      	mov	r1, r4
 8001b6a:	f7ff ff59 	bl	8001a20 <__sflush_r>
 8001b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b70:	4605      	mov	r5, r0
 8001b72:	07da      	lsls	r2, r3, #31
 8001b74:	d4e0      	bmi.n	8001b38 <_fflush_r+0xc>
 8001b76:	89a3      	ldrh	r3, [r4, #12]
 8001b78:	059b      	lsls	r3, r3, #22
 8001b7a:	d4dd      	bmi.n	8001b38 <_fflush_r+0xc>
 8001b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b7e:	f000 f908 	bl	8001d92 <__retarget_lock_release_recursive>
 8001b82:	e7d9      	b.n	8001b38 <_fflush_r+0xc>
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <_fflush_r+0x70>)
 8001b86:	429c      	cmp	r4, r3
 8001b88:	d101      	bne.n	8001b8e <_fflush_r+0x62>
 8001b8a:	68ac      	ldr	r4, [r5, #8]
 8001b8c:	e7df      	b.n	8001b4e <_fflush_r+0x22>
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <_fflush_r+0x74>)
 8001b90:	429c      	cmp	r4, r3
 8001b92:	bf08      	it	eq
 8001b94:	68ec      	ldreq	r4, [r5, #12]
 8001b96:	e7da      	b.n	8001b4e <_fflush_r+0x22>
 8001b98:	080021a4 	.word	0x080021a4
 8001b9c:	080021c4 	.word	0x080021c4
 8001ba0:	08002184 	.word	0x08002184

08001ba4 <std>:
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	b510      	push	{r4, lr}
 8001ba8:	4604      	mov	r4, r0
 8001baa:	e9c0 3300 	strd	r3, r3, [r0]
 8001bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bb2:	6083      	str	r3, [r0, #8]
 8001bb4:	8181      	strh	r1, [r0, #12]
 8001bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8001bb8:	81c2      	strh	r2, [r0, #14]
 8001bba:	6183      	str	r3, [r0, #24]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	305c      	adds	r0, #92	; 0x5c
 8001bc2:	f7ff fdef 	bl	80017a4 <memset>
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <std+0x38>)
 8001bc8:	6224      	str	r4, [r4, #32]
 8001bca:	6263      	str	r3, [r4, #36]	; 0x24
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <std+0x3c>)
 8001bce:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <std+0x40>)
 8001bd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <std+0x44>)
 8001bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8001bd8:	bd10      	pop	{r4, pc}
 8001bda:	bf00      	nop
 8001bdc:	08001fc9 	.word	0x08001fc9
 8001be0:	08001feb 	.word	0x08001feb
 8001be4:	08002023 	.word	0x08002023
 8001be8:	08002047 	.word	0x08002047

08001bec <_cleanup_r>:
 8001bec:	4901      	ldr	r1, [pc, #4]	; (8001bf4 <_cleanup_r+0x8>)
 8001bee:	f000 b8af 	b.w	8001d50 <_fwalk_reent>
 8001bf2:	bf00      	nop
 8001bf4:	08001b2d 	.word	0x08001b2d

08001bf8 <__sfmoreglue>:
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	2568      	movs	r5, #104	; 0x68
 8001bfc:	1e4a      	subs	r2, r1, #1
 8001bfe:	4355      	muls	r5, r2
 8001c00:	460e      	mov	r6, r1
 8001c02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c06:	f000 f975 	bl	8001ef4 <_malloc_r>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	b140      	cbz	r0, 8001c20 <__sfmoreglue+0x28>
 8001c0e:	2100      	movs	r1, #0
 8001c10:	e9c0 1600 	strd	r1, r6, [r0]
 8001c14:	300c      	adds	r0, #12
 8001c16:	60a0      	str	r0, [r4, #8]
 8001c18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c1c:	f7ff fdc2 	bl	80017a4 <memset>
 8001c20:	4620      	mov	r0, r4
 8001c22:	bd70      	pop	{r4, r5, r6, pc}

08001c24 <__sfp_lock_acquire>:
 8001c24:	4801      	ldr	r0, [pc, #4]	; (8001c2c <__sfp_lock_acquire+0x8>)
 8001c26:	f000 b8b3 	b.w	8001d90 <__retarget_lock_acquire_recursive>
 8001c2a:	bf00      	nop
 8001c2c:	200000e4 	.word	0x200000e4

08001c30 <__sfp_lock_release>:
 8001c30:	4801      	ldr	r0, [pc, #4]	; (8001c38 <__sfp_lock_release+0x8>)
 8001c32:	f000 b8ae 	b.w	8001d92 <__retarget_lock_release_recursive>
 8001c36:	bf00      	nop
 8001c38:	200000e4 	.word	0x200000e4

08001c3c <__sinit_lock_acquire>:
 8001c3c:	4801      	ldr	r0, [pc, #4]	; (8001c44 <__sinit_lock_acquire+0x8>)
 8001c3e:	f000 b8a7 	b.w	8001d90 <__retarget_lock_acquire_recursive>
 8001c42:	bf00      	nop
 8001c44:	200000df 	.word	0x200000df

08001c48 <__sinit_lock_release>:
 8001c48:	4801      	ldr	r0, [pc, #4]	; (8001c50 <__sinit_lock_release+0x8>)
 8001c4a:	f000 b8a2 	b.w	8001d92 <__retarget_lock_release_recursive>
 8001c4e:	bf00      	nop
 8001c50:	200000df 	.word	0x200000df

08001c54 <__sinit>:
 8001c54:	b510      	push	{r4, lr}
 8001c56:	4604      	mov	r4, r0
 8001c58:	f7ff fff0 	bl	8001c3c <__sinit_lock_acquire>
 8001c5c:	69a3      	ldr	r3, [r4, #24]
 8001c5e:	b11b      	cbz	r3, 8001c68 <__sinit+0x14>
 8001c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c64:	f7ff bff0 	b.w	8001c48 <__sinit_lock_release>
 8001c68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c6c:	6523      	str	r3, [r4, #80]	; 0x50
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <__sinit+0x68>)
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <__sinit+0x6c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c76:	42a3      	cmp	r3, r4
 8001c78:	bf08      	it	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	bf08      	it	eq
 8001c80:	61a3      	streq	r3, [r4, #24]
 8001c82:	f000 f81f 	bl	8001cc4 <__sfp>
 8001c86:	6060      	str	r0, [r4, #4]
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f000 f81b 	bl	8001cc4 <__sfp>
 8001c8e:	60a0      	str	r0, [r4, #8]
 8001c90:	4620      	mov	r0, r4
 8001c92:	f000 f817 	bl	8001cc4 <__sfp>
 8001c96:	2200      	movs	r2, #0
 8001c98:	2104      	movs	r1, #4
 8001c9a:	60e0      	str	r0, [r4, #12]
 8001c9c:	6860      	ldr	r0, [r4, #4]
 8001c9e:	f7ff ff81 	bl	8001ba4 <std>
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2109      	movs	r1, #9
 8001ca6:	68a0      	ldr	r0, [r4, #8]
 8001ca8:	f7ff ff7c 	bl	8001ba4 <std>
 8001cac:	2202      	movs	r2, #2
 8001cae:	2112      	movs	r1, #18
 8001cb0:	68e0      	ldr	r0, [r4, #12]
 8001cb2:	f7ff ff77 	bl	8001ba4 <std>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61a3      	str	r3, [r4, #24]
 8001cba:	e7d1      	b.n	8001c60 <__sinit+0xc>
 8001cbc:	08002180 	.word	0x08002180
 8001cc0:	08001bed 	.word	0x08001bed

08001cc4 <__sfp>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	4607      	mov	r7, r0
 8001cc8:	f7ff ffac 	bl	8001c24 <__sfp_lock_acquire>
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <__sfp+0x84>)
 8001cce:	681e      	ldr	r6, [r3, #0]
 8001cd0:	69b3      	ldr	r3, [r6, #24]
 8001cd2:	b913      	cbnz	r3, 8001cda <__sfp+0x16>
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	f7ff ffbd 	bl	8001c54 <__sinit>
 8001cda:	3648      	adds	r6, #72	; 0x48
 8001cdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	d503      	bpl.n	8001cec <__sfp+0x28>
 8001ce4:	6833      	ldr	r3, [r6, #0]
 8001ce6:	b30b      	cbz	r3, 8001d2c <__sfp+0x68>
 8001ce8:	6836      	ldr	r6, [r6, #0]
 8001cea:	e7f7      	b.n	8001cdc <__sfp+0x18>
 8001cec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001cf0:	b9d5      	cbnz	r5, 8001d28 <__sfp+0x64>
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <__sfp+0x88>)
 8001cf4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001cf8:	60e3      	str	r3, [r4, #12]
 8001cfa:	6665      	str	r5, [r4, #100]	; 0x64
 8001cfc:	f000 f847 	bl	8001d8e <__retarget_lock_init_recursive>
 8001d00:	f7ff ff96 	bl	8001c30 <__sfp_lock_release>
 8001d04:	2208      	movs	r2, #8
 8001d06:	4629      	mov	r1, r5
 8001d08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001d0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001d10:	6025      	str	r5, [r4, #0]
 8001d12:	61a5      	str	r5, [r4, #24]
 8001d14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d18:	f7ff fd44 	bl	80017a4 <memset>
 8001d1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d24:	4620      	mov	r0, r4
 8001d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d28:	3468      	adds	r4, #104	; 0x68
 8001d2a:	e7d9      	b.n	8001ce0 <__sfp+0x1c>
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4638      	mov	r0, r7
 8001d30:	f7ff ff62 	bl	8001bf8 <__sfmoreglue>
 8001d34:	4604      	mov	r4, r0
 8001d36:	6030      	str	r0, [r6, #0]
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d1d5      	bne.n	8001ce8 <__sfp+0x24>
 8001d3c:	f7ff ff78 	bl	8001c30 <__sfp_lock_release>
 8001d40:	230c      	movs	r3, #12
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	e7ee      	b.n	8001d24 <__sfp+0x60>
 8001d46:	bf00      	nop
 8001d48:	08002180 	.word	0x08002180
 8001d4c:	ffff0001 	.word	0xffff0001

08001d50 <_fwalk_reent>:
 8001d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d54:	4606      	mov	r6, r0
 8001d56:	4688      	mov	r8, r1
 8001d58:	2700      	movs	r7, #0
 8001d5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d62:	f1b9 0901 	subs.w	r9, r9, #1
 8001d66:	d505      	bpl.n	8001d74 <_fwalk_reent+0x24>
 8001d68:	6824      	ldr	r4, [r4, #0]
 8001d6a:	2c00      	cmp	r4, #0
 8001d6c:	d1f7      	bne.n	8001d5e <_fwalk_reent+0xe>
 8001d6e:	4638      	mov	r0, r7
 8001d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d74:	89ab      	ldrh	r3, [r5, #12]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d907      	bls.n	8001d8a <_fwalk_reent+0x3a>
 8001d7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	d003      	beq.n	8001d8a <_fwalk_reent+0x3a>
 8001d82:	4629      	mov	r1, r5
 8001d84:	4630      	mov	r0, r6
 8001d86:	47c0      	blx	r8
 8001d88:	4307      	orrs	r7, r0
 8001d8a:	3568      	adds	r5, #104	; 0x68
 8001d8c:	e7e9      	b.n	8001d62 <_fwalk_reent+0x12>

08001d8e <__retarget_lock_init_recursive>:
 8001d8e:	4770      	bx	lr

08001d90 <__retarget_lock_acquire_recursive>:
 8001d90:	4770      	bx	lr

08001d92 <__retarget_lock_release_recursive>:
 8001d92:	4770      	bx	lr

08001d94 <__swhatbuf_r>:
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	460e      	mov	r6, r1
 8001d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d9c:	4614      	mov	r4, r2
 8001d9e:	2900      	cmp	r1, #0
 8001da0:	461d      	mov	r5, r3
 8001da2:	b096      	sub	sp, #88	; 0x58
 8001da4:	da07      	bge.n	8001db6 <__swhatbuf_r+0x22>
 8001da6:	2300      	movs	r3, #0
 8001da8:	602b      	str	r3, [r5, #0]
 8001daa:	89b3      	ldrh	r3, [r6, #12]
 8001dac:	061a      	lsls	r2, r3, #24
 8001dae:	d410      	bmi.n	8001dd2 <__swhatbuf_r+0x3e>
 8001db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db4:	e00e      	b.n	8001dd4 <__swhatbuf_r+0x40>
 8001db6:	466a      	mov	r2, sp
 8001db8:	f000 f96c 	bl	8002094 <_fstat_r>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	dbf2      	blt.n	8001da6 <__swhatbuf_r+0x12>
 8001dc0:	9a01      	ldr	r2, [sp, #4]
 8001dc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001dc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001dca:	425a      	negs	r2, r3
 8001dcc:	415a      	adcs	r2, r3
 8001dce:	602a      	str	r2, [r5, #0]
 8001dd0:	e7ee      	b.n	8001db0 <__swhatbuf_r+0x1c>
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	6023      	str	r3, [r4, #0]
 8001dd8:	b016      	add	sp, #88	; 0x58
 8001dda:	bd70      	pop	{r4, r5, r6, pc}

08001ddc <__smakebuf_r>:
 8001ddc:	898b      	ldrh	r3, [r1, #12]
 8001dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001de0:	079d      	lsls	r5, r3, #30
 8001de2:	4606      	mov	r6, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	d507      	bpl.n	8001df8 <__smakebuf_r+0x1c>
 8001de8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001dec:	6023      	str	r3, [r4, #0]
 8001dee:	6123      	str	r3, [r4, #16]
 8001df0:	2301      	movs	r3, #1
 8001df2:	6163      	str	r3, [r4, #20]
 8001df4:	b002      	add	sp, #8
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	466a      	mov	r2, sp
 8001dfa:	ab01      	add	r3, sp, #4
 8001dfc:	f7ff ffca 	bl	8001d94 <__swhatbuf_r>
 8001e00:	9900      	ldr	r1, [sp, #0]
 8001e02:	4605      	mov	r5, r0
 8001e04:	4630      	mov	r0, r6
 8001e06:	f000 f875 	bl	8001ef4 <_malloc_r>
 8001e0a:	b948      	cbnz	r0, 8001e20 <__smakebuf_r+0x44>
 8001e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e10:	059a      	lsls	r2, r3, #22
 8001e12:	d4ef      	bmi.n	8001df4 <__smakebuf_r+0x18>
 8001e14:	f023 0303 	bic.w	r3, r3, #3
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	81a3      	strh	r3, [r4, #12]
 8001e1e:	e7e3      	b.n	8001de8 <__smakebuf_r+0xc>
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <__smakebuf_r+0x7c>)
 8001e22:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	6020      	str	r0, [r4, #0]
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	81a3      	strh	r3, [r4, #12]
 8001e2e:	9b00      	ldr	r3, [sp, #0]
 8001e30:	6120      	str	r0, [r4, #16]
 8001e32:	6163      	str	r3, [r4, #20]
 8001e34:	9b01      	ldr	r3, [sp, #4]
 8001e36:	b15b      	cbz	r3, 8001e50 <__smakebuf_r+0x74>
 8001e38:	4630      	mov	r0, r6
 8001e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e3e:	f000 f93b 	bl	80020b8 <_isatty_r>
 8001e42:	b128      	cbz	r0, 8001e50 <__smakebuf_r+0x74>
 8001e44:	89a3      	ldrh	r3, [r4, #12]
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	81a3      	strh	r3, [r4, #12]
 8001e50:	89a0      	ldrh	r0, [r4, #12]
 8001e52:	4305      	orrs	r5, r0
 8001e54:	81a5      	strh	r5, [r4, #12]
 8001e56:	e7cd      	b.n	8001df4 <__smakebuf_r+0x18>
 8001e58:	08001bed 	.word	0x08001bed

08001e5c <_free_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4605      	mov	r5, r0
 8001e60:	2900      	cmp	r1, #0
 8001e62:	d043      	beq.n	8001eec <_free_r+0x90>
 8001e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e68:	1f0c      	subs	r4, r1, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bfb8      	it	lt
 8001e6e:	18e4      	addlt	r4, r4, r3
 8001e70:	f000 f944 	bl	80020fc <__malloc_lock>
 8001e74:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <_free_r+0x94>)
 8001e76:	6813      	ldr	r3, [r2, #0]
 8001e78:	4610      	mov	r0, r2
 8001e7a:	b933      	cbnz	r3, 8001e8a <_free_r+0x2e>
 8001e7c:	6063      	str	r3, [r4, #4]
 8001e7e:	6014      	str	r4, [r2, #0]
 8001e80:	4628      	mov	r0, r5
 8001e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e86:	f000 b93f 	b.w	8002108 <__malloc_unlock>
 8001e8a:	42a3      	cmp	r3, r4
 8001e8c:	d90a      	bls.n	8001ea4 <_free_r+0x48>
 8001e8e:	6821      	ldr	r1, [r4, #0]
 8001e90:	1862      	adds	r2, r4, r1
 8001e92:	4293      	cmp	r3, r2
 8001e94:	bf01      	itttt	eq
 8001e96:	681a      	ldreq	r2, [r3, #0]
 8001e98:	685b      	ldreq	r3, [r3, #4]
 8001e9a:	1852      	addeq	r2, r2, r1
 8001e9c:	6022      	streq	r2, [r4, #0]
 8001e9e:	6063      	str	r3, [r4, #4]
 8001ea0:	6004      	str	r4, [r0, #0]
 8001ea2:	e7ed      	b.n	8001e80 <_free_r+0x24>
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	b10b      	cbz	r3, 8001eae <_free_r+0x52>
 8001eaa:	42a3      	cmp	r3, r4
 8001eac:	d9fa      	bls.n	8001ea4 <_free_r+0x48>
 8001eae:	6811      	ldr	r1, [r2, #0]
 8001eb0:	1850      	adds	r0, r2, r1
 8001eb2:	42a0      	cmp	r0, r4
 8001eb4:	d10b      	bne.n	8001ece <_free_r+0x72>
 8001eb6:	6820      	ldr	r0, [r4, #0]
 8001eb8:	4401      	add	r1, r0
 8001eba:	1850      	adds	r0, r2, r1
 8001ebc:	4283      	cmp	r3, r0
 8001ebe:	6011      	str	r1, [r2, #0]
 8001ec0:	d1de      	bne.n	8001e80 <_free_r+0x24>
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4401      	add	r1, r0
 8001ec8:	6011      	str	r1, [r2, #0]
 8001eca:	6053      	str	r3, [r2, #4]
 8001ecc:	e7d8      	b.n	8001e80 <_free_r+0x24>
 8001ece:	d902      	bls.n	8001ed6 <_free_r+0x7a>
 8001ed0:	230c      	movs	r3, #12
 8001ed2:	602b      	str	r3, [r5, #0]
 8001ed4:	e7d4      	b.n	8001e80 <_free_r+0x24>
 8001ed6:	6820      	ldr	r0, [r4, #0]
 8001ed8:	1821      	adds	r1, r4, r0
 8001eda:	428b      	cmp	r3, r1
 8001edc:	bf01      	itttt	eq
 8001ede:	6819      	ldreq	r1, [r3, #0]
 8001ee0:	685b      	ldreq	r3, [r3, #4]
 8001ee2:	1809      	addeq	r1, r1, r0
 8001ee4:	6021      	streq	r1, [r4, #0]
 8001ee6:	6063      	str	r3, [r4, #4]
 8001ee8:	6054      	str	r4, [r2, #4]
 8001eea:	e7c9      	b.n	8001e80 <_free_r+0x24>
 8001eec:	bd38      	pop	{r3, r4, r5, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000090 	.word	0x20000090

08001ef4 <_malloc_r>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	1ccd      	adds	r5, r1, #3
 8001ef8:	f025 0503 	bic.w	r5, r5, #3
 8001efc:	3508      	adds	r5, #8
 8001efe:	2d0c      	cmp	r5, #12
 8001f00:	bf38      	it	cc
 8001f02:	250c      	movcc	r5, #12
 8001f04:	2d00      	cmp	r5, #0
 8001f06:	4606      	mov	r6, r0
 8001f08:	db01      	blt.n	8001f0e <_malloc_r+0x1a>
 8001f0a:	42a9      	cmp	r1, r5
 8001f0c:	d903      	bls.n	8001f16 <_malloc_r+0x22>
 8001f0e:	230c      	movs	r3, #12
 8001f10:	6033      	str	r3, [r6, #0]
 8001f12:	2000      	movs	r0, #0
 8001f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f16:	f000 f8f1 	bl	80020fc <__malloc_lock>
 8001f1a:	4921      	ldr	r1, [pc, #132]	; (8001fa0 <_malloc_r+0xac>)
 8001f1c:	680a      	ldr	r2, [r1, #0]
 8001f1e:	4614      	mov	r4, r2
 8001f20:	b99c      	cbnz	r4, 8001f4a <_malloc_r+0x56>
 8001f22:	4f20      	ldr	r7, [pc, #128]	; (8001fa4 <_malloc_r+0xb0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b923      	cbnz	r3, 8001f32 <_malloc_r+0x3e>
 8001f28:	4621      	mov	r1, r4
 8001f2a:	4630      	mov	r0, r6
 8001f2c:	f000 f83c 	bl	8001fa8 <_sbrk_r>
 8001f30:	6038      	str	r0, [r7, #0]
 8001f32:	4629      	mov	r1, r5
 8001f34:	4630      	mov	r0, r6
 8001f36:	f000 f837 	bl	8001fa8 <_sbrk_r>
 8001f3a:	1c43      	adds	r3, r0, #1
 8001f3c:	d123      	bne.n	8001f86 <_malloc_r+0x92>
 8001f3e:	230c      	movs	r3, #12
 8001f40:	4630      	mov	r0, r6
 8001f42:	6033      	str	r3, [r6, #0]
 8001f44:	f000 f8e0 	bl	8002108 <__malloc_unlock>
 8001f48:	e7e3      	b.n	8001f12 <_malloc_r+0x1e>
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	1b5b      	subs	r3, r3, r5
 8001f4e:	d417      	bmi.n	8001f80 <_malloc_r+0x8c>
 8001f50:	2b0b      	cmp	r3, #11
 8001f52:	d903      	bls.n	8001f5c <_malloc_r+0x68>
 8001f54:	6023      	str	r3, [r4, #0]
 8001f56:	441c      	add	r4, r3
 8001f58:	6025      	str	r5, [r4, #0]
 8001f5a:	e004      	b.n	8001f66 <_malloc_r+0x72>
 8001f5c:	6863      	ldr	r3, [r4, #4]
 8001f5e:	42a2      	cmp	r2, r4
 8001f60:	bf0c      	ite	eq
 8001f62:	600b      	streq	r3, [r1, #0]
 8001f64:	6053      	strne	r3, [r2, #4]
 8001f66:	4630      	mov	r0, r6
 8001f68:	f000 f8ce 	bl	8002108 <__malloc_unlock>
 8001f6c:	f104 000b 	add.w	r0, r4, #11
 8001f70:	1d23      	adds	r3, r4, #4
 8001f72:	f020 0007 	bic.w	r0, r0, #7
 8001f76:	1ac2      	subs	r2, r0, r3
 8001f78:	d0cc      	beq.n	8001f14 <_malloc_r+0x20>
 8001f7a:	1a1b      	subs	r3, r3, r0
 8001f7c:	50a3      	str	r3, [r4, r2]
 8001f7e:	e7c9      	b.n	8001f14 <_malloc_r+0x20>
 8001f80:	4622      	mov	r2, r4
 8001f82:	6864      	ldr	r4, [r4, #4]
 8001f84:	e7cc      	b.n	8001f20 <_malloc_r+0x2c>
 8001f86:	1cc4      	adds	r4, r0, #3
 8001f88:	f024 0403 	bic.w	r4, r4, #3
 8001f8c:	42a0      	cmp	r0, r4
 8001f8e:	d0e3      	beq.n	8001f58 <_malloc_r+0x64>
 8001f90:	1a21      	subs	r1, r4, r0
 8001f92:	4630      	mov	r0, r6
 8001f94:	f000 f808 	bl	8001fa8 <_sbrk_r>
 8001f98:	3001      	adds	r0, #1
 8001f9a:	d1dd      	bne.n	8001f58 <_malloc_r+0x64>
 8001f9c:	e7cf      	b.n	8001f3e <_malloc_r+0x4a>
 8001f9e:	bf00      	nop
 8001fa0:	20000090 	.word	0x20000090
 8001fa4:	20000094 	.word	0x20000094

08001fa8 <_sbrk_r>:
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	2300      	movs	r3, #0
 8001fac:	4d05      	ldr	r5, [pc, #20]	; (8001fc4 <_sbrk_r+0x1c>)
 8001fae:	4604      	mov	r4, r0
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	602b      	str	r3, [r5, #0]
 8001fb4:	f7fe fa1e 	bl	80003f4 <_sbrk>
 8001fb8:	1c43      	adds	r3, r0, #1
 8001fba:	d102      	bne.n	8001fc2 <_sbrk_r+0x1a>
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	b103      	cbz	r3, 8001fc2 <_sbrk_r+0x1a>
 8001fc0:	6023      	str	r3, [r4, #0]
 8001fc2:	bd38      	pop	{r3, r4, r5, pc}
 8001fc4:	200000e8 	.word	0x200000e8

08001fc8 <__sread>:
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	460c      	mov	r4, r1
 8001fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fd0:	f000 f8a0 	bl	8002114 <_read_r>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	bfab      	itete	ge
 8001fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fda:	89a3      	ldrhlt	r3, [r4, #12]
 8001fdc:	181b      	addge	r3, r3, r0
 8001fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001fe2:	bfac      	ite	ge
 8001fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001fe6:	81a3      	strhlt	r3, [r4, #12]
 8001fe8:	bd10      	pop	{r4, pc}

08001fea <__swrite>:
 8001fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fee:	461f      	mov	r7, r3
 8001ff0:	898b      	ldrh	r3, [r1, #12]
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	05db      	lsls	r3, r3, #23
 8001ff6:	460c      	mov	r4, r1
 8001ff8:	4616      	mov	r6, r2
 8001ffa:	d505      	bpl.n	8002008 <__swrite+0x1e>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	2200      	movs	r2, #0
 8002000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002004:	f000 f868 	bl	80020d8 <_lseek_r>
 8002008:	89a3      	ldrh	r3, [r4, #12]
 800200a:	4632      	mov	r2, r6
 800200c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002010:	81a3      	strh	r3, [r4, #12]
 8002012:	4628      	mov	r0, r5
 8002014:	463b      	mov	r3, r7
 8002016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800201a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800201e:	f000 b817 	b.w	8002050 <_write_r>

08002022 <__sseek>:
 8002022:	b510      	push	{r4, lr}
 8002024:	460c      	mov	r4, r1
 8002026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800202a:	f000 f855 	bl	80020d8 <_lseek_r>
 800202e:	1c43      	adds	r3, r0, #1
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	bf15      	itete	ne
 8002034:	6560      	strne	r0, [r4, #84]	; 0x54
 8002036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800203a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800203e:	81a3      	strheq	r3, [r4, #12]
 8002040:	bf18      	it	ne
 8002042:	81a3      	strhne	r3, [r4, #12]
 8002044:	bd10      	pop	{r4, pc}

08002046 <__sclose>:
 8002046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800204a:	f000 b813 	b.w	8002074 <_close_r>
	...

08002050 <_write_r>:
 8002050:	b538      	push	{r3, r4, r5, lr}
 8002052:	4604      	mov	r4, r0
 8002054:	4608      	mov	r0, r1
 8002056:	4611      	mov	r1, r2
 8002058:	2200      	movs	r2, #0
 800205a:	4d05      	ldr	r5, [pc, #20]	; (8002070 <_write_r+0x20>)
 800205c:	602a      	str	r2, [r5, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	f7fe f8a6 	bl	80001b0 <_write>
 8002064:	1c43      	adds	r3, r0, #1
 8002066:	d102      	bne.n	800206e <_write_r+0x1e>
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	b103      	cbz	r3, 800206e <_write_r+0x1e>
 800206c:	6023      	str	r3, [r4, #0]
 800206e:	bd38      	pop	{r3, r4, r5, pc}
 8002070:	200000e8 	.word	0x200000e8

08002074 <_close_r>:
 8002074:	b538      	push	{r3, r4, r5, lr}
 8002076:	2300      	movs	r3, #0
 8002078:	4d05      	ldr	r5, [pc, #20]	; (8002090 <_close_r+0x1c>)
 800207a:	4604      	mov	r4, r0
 800207c:	4608      	mov	r0, r1
 800207e:	602b      	str	r3, [r5, #0]
 8002080:	f7fe f988 	bl	8000394 <_close>
 8002084:	1c43      	adds	r3, r0, #1
 8002086:	d102      	bne.n	800208e <_close_r+0x1a>
 8002088:	682b      	ldr	r3, [r5, #0]
 800208a:	b103      	cbz	r3, 800208e <_close_r+0x1a>
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	bd38      	pop	{r3, r4, r5, pc}
 8002090:	200000e8 	.word	0x200000e8

08002094 <_fstat_r>:
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	2300      	movs	r3, #0
 8002098:	4d06      	ldr	r5, [pc, #24]	; (80020b4 <_fstat_r+0x20>)
 800209a:	4604      	mov	r4, r0
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	602b      	str	r3, [r5, #0]
 80020a2:	f7fe f982 	bl	80003aa <_fstat>
 80020a6:	1c43      	adds	r3, r0, #1
 80020a8:	d102      	bne.n	80020b0 <_fstat_r+0x1c>
 80020aa:	682b      	ldr	r3, [r5, #0]
 80020ac:	b103      	cbz	r3, 80020b0 <_fstat_r+0x1c>
 80020ae:	6023      	str	r3, [r4, #0]
 80020b0:	bd38      	pop	{r3, r4, r5, pc}
 80020b2:	bf00      	nop
 80020b4:	200000e8 	.word	0x200000e8

080020b8 <_isatty_r>:
 80020b8:	b538      	push	{r3, r4, r5, lr}
 80020ba:	2300      	movs	r3, #0
 80020bc:	4d05      	ldr	r5, [pc, #20]	; (80020d4 <_isatty_r+0x1c>)
 80020be:	4604      	mov	r4, r0
 80020c0:	4608      	mov	r0, r1
 80020c2:	602b      	str	r3, [r5, #0]
 80020c4:	f7fe f980 	bl	80003c8 <_isatty>
 80020c8:	1c43      	adds	r3, r0, #1
 80020ca:	d102      	bne.n	80020d2 <_isatty_r+0x1a>
 80020cc:	682b      	ldr	r3, [r5, #0]
 80020ce:	b103      	cbz	r3, 80020d2 <_isatty_r+0x1a>
 80020d0:	6023      	str	r3, [r4, #0]
 80020d2:	bd38      	pop	{r3, r4, r5, pc}
 80020d4:	200000e8 	.word	0x200000e8

080020d8 <_lseek_r>:
 80020d8:	b538      	push	{r3, r4, r5, lr}
 80020da:	4604      	mov	r4, r0
 80020dc:	4608      	mov	r0, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	2200      	movs	r2, #0
 80020e2:	4d05      	ldr	r5, [pc, #20]	; (80020f8 <_lseek_r+0x20>)
 80020e4:	602a      	str	r2, [r5, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	f7fe f978 	bl	80003dc <_lseek>
 80020ec:	1c43      	adds	r3, r0, #1
 80020ee:	d102      	bne.n	80020f6 <_lseek_r+0x1e>
 80020f0:	682b      	ldr	r3, [r5, #0]
 80020f2:	b103      	cbz	r3, 80020f6 <_lseek_r+0x1e>
 80020f4:	6023      	str	r3, [r4, #0]
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
 80020f8:	200000e8 	.word	0x200000e8

080020fc <__malloc_lock>:
 80020fc:	4801      	ldr	r0, [pc, #4]	; (8002104 <__malloc_lock+0x8>)
 80020fe:	f7ff be47 	b.w	8001d90 <__retarget_lock_acquire_recursive>
 8002102:	bf00      	nop
 8002104:	200000e0 	.word	0x200000e0

08002108 <__malloc_unlock>:
 8002108:	4801      	ldr	r0, [pc, #4]	; (8002110 <__malloc_unlock+0x8>)
 800210a:	f7ff be42 	b.w	8001d92 <__retarget_lock_release_recursive>
 800210e:	bf00      	nop
 8002110:	200000e0 	.word	0x200000e0

08002114 <_read_r>:
 8002114:	b538      	push	{r3, r4, r5, lr}
 8002116:	4604      	mov	r4, r0
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	2200      	movs	r2, #0
 800211e:	4d05      	ldr	r5, [pc, #20]	; (8002134 <_read_r+0x20>)
 8002120:	602a      	str	r2, [r5, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	f7fe f919 	bl	800035a <_read>
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	d102      	bne.n	8002132 <_read_r+0x1e>
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	b103      	cbz	r3, 8002132 <_read_r+0x1e>
 8002130:	6023      	str	r3, [r4, #0]
 8002132:	bd38      	pop	{r3, r4, r5, pc}
 8002134:	200000e8 	.word	0x200000e8

08002138 <_init>:
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	bf00      	nop
 800213c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213e:	bc08      	pop	{r3}
 8002140:	469e      	mov	lr, r3
 8002142:	4770      	bx	lr

08002144 <_fini>:
 8002144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002146:	bf00      	nop
 8002148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214a:	bc08      	pop	{r3}
 800214c:	469e      	mov	lr, r3
 800214e:	4770      	bx	lr
